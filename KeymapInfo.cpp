#include "KeymapInfo.h"
#include "Settings.h"

#include <iostream>
#include <cassert>
#include <sstream>

#include <boost/filesystem.hpp>

std::string keySymToUtf8(xkb_keysym_t key_sym) {
   constexpr std::size_t utf8_buffer_size = 7;
   char utf8_buffer[utf8_buffer_size];
   
   auto utf8_bytes_written 
      = xkb_keysym_to_utf8(key_sym , utf8_buffer, utf8_buffer_size);
      
   assert(utf8_bytes_written > 0);
      
   return std::string{utf8_buffer};
}

void 
   KeymapInfo
      ::dump() const
{
   std::cout << "ascii:" << std::endl;
   for(const auto &entry: ascii_to_kaleidoscope_key_code_) {
      std::cout << "   " << entry.first 
         << ": " << entry.second.format() << std::endl;
   }
   
   std::cout << "unicode:" << std::endl;
   for(const auto &entry: unicode_to_kaleidoscope_key_code_) {
      std::cout << "   " << keySymToUtf8(entry.second.key_sym_)
         << ": " << entry.second.format() << std::endl;
   }
   
   std::cout << "non printable:" << std::endl;
   for(const auto &entry: non_printable_to_kaleidoscope_key_code_) {
      std::cout << "   " << entry.first 
         << ": " << entry.second.format() << std::endl;
   }
}

void 
   KeymapInfo
      ::writeConfigFile(const Settings &settings) const
{
   
   std::ostringstream o;
   o << settings.base_path_ << "/" << layout_;
   
   if(!variant_.empty()) {
      o << "/" << variant_;
   }
   
   boost::system::error_code ec;
   if (!boost::filesystem::create_directories(o.str(), ec)) {
      std::cerr << ec.message() << ": " << o.str() << "\n";
      throw std::runtime_error("Couldn't create directory");
   }
   
   std::ofstream file(o.str() + "/keymap.h");
   
   this->writeConfigFile(file);
}

void 
   KeymapInfo
      ::writeConfigFile(std::ostream &file) const
{
   file << 
"/* Kaleidoscope - Firmware for computer input devices\n"
" * Copyright (C) 2013-2019  Keyboard.io, Inc.\n"
" *\n"
" * This program is free software: you can redistribute it and/or modify it under\n"
" * the terms of the GNU General Public License as published by the Free Software\n"
" * Foundation, version 3.\n"
" *\n"
" * This program is distributed in the hope that it will be useful, but WITHOUT\n"
" * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n"
" * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n"
" * details.\n"
" *\n"
" * You should have received a copy of the GNU General Public License along with\n"
" * this program. If not, see <http://www.gnu.org/licenses/>.\n"
" */\n"
"\n"
"#pragma once\n"
"\n"
"#include \"kaleidoscope/host_keymap/common.h\"\n"
"\n"
"// This file was autogenerated on Ubuntu 19.10 based on information\n"
"// provided by the XKB X11 system (mostly libxkbcommon).\n"
"\n";
   file << "// layout: " << layout_ << "\n";
   file << "// variant: " << variant_ << "\n";
   file << "\n";
   file << "#define _HOST_KEYMAP_ASCII_KEYMAP(OP) \\\n";

   for(const auto &entry: ascii_to_kaleidoscope_key_code_) {
      file << "   OP('" << entry.first << "', "
         << entry.second.format() << ") \\\n";
   }
   file << "\n";
   
   file << "#define _HOST_KEYMAP_UNICODE_KEYMAP(OP) \\\n";
   
   for(const auto &entry: unicode_to_kaleidoscope_key_code_) {
      file << "   OP(L'" << keySymToUtf8(entry.second.key_sym_) << "', "
         << entry.second.format() << ") \\\n";
   }
   file << "\n";
   
   file << "#define _HOST_KEYMAP_NON_PRINTABLE_KEYMAP(OP) \\\n";
   
   for(const auto &entry: non_printable_to_kaleidoscope_key_code_) {
      file << "   OP(" << entry.first << ", "
         << entry.second.format() << ") \\\n";
   }
   file << "\n";
   
   file << "\n";
   file << "namespace kaleidoscope {\n";
   file << "namespace host_keymap {\n";
   file << "namespace linux {\n";
   file << "namespace " << layout_ << " {\n";
   file << "namespace " << variant_ << " {\n";
   file << "\n";
   file << "HOST_KEYMAP_ASCII_CONVERTER(\n";
   file << "   _HOST_KEYMAP_ASCII_KEYMAP,\n";
   file << "   CharParsingStandardFallback\n";
   file << ")\n";
   file << "\n";
   file << "HOST_KEYMAP_UNICODE_CONVERTER(\n";
   file << "   _HOST_KEYMAP_UNICODE_KEYMAP,\n";
   file << "   WCharParsingStandardFallback\n";
   file << ")\n";
   file << "\n";
   file << "HOST_KEYMAP_NON_PRINTABLE_CONVERTER(\n";
   file << "   _HOST_KEYMAP_NON_PRINTABLE_KEYMAP,\n";
   file << "   NonPrintableParsingStandardFallback\n";
   file << ")\n";
   file << "\n";
   file << "} // namespace " << variant_ << "\n";
   file << "} // namespace " << layout_ << "\n";
   file << "} // namespace linux\n";
   file << "} // namespace host_keymap\n";
   file << "} // namespace kaleidoscope\n";
   file << "\n";
   file << "#undef _HOST_KEYMAP_ASCII_KEYMAP\n";
   file << "#undef _HOST_KEYMAP_UNICODE_KEYMAP\n";
   file << "#undef _HOST_KEYMAP_NON_PRINTABLE_KEYMAP\n";
   file << "\n";
}
